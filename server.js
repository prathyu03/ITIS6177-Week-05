const express = require('express');
const app = express();
const port = 3000;
const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
const cors = require('cors');
const bodyParser = require('body-parser');


const mariadb = require('mariadb');
const pool = mariadb.createPool({
    host: 'localhost',
    user: 'root',
    password: 'root',
    database: 'sample',
    port: 3306,
    connectionLimit: 5
});


const options = {
    definition: {
        info: {
            title: 'Sample Swagger API',
            version: '1.0.0',
            description: 'Sample API autogenerated by swagger docs'
        }
    },
    apis: ['server.js'],
};

const specs = swaggerJsdoc(options);

app.use('/docs', swaggerUi.serve, swaggerUi.setup(specs));
app.use(cors());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

app.get('/agents', async (req, res) => {
    let connection;
    try {
        connection = await pool.getConnection();
        const rows = await connection.query("SELECT * FROM agents");
        res.statusCode = 200;
        res.setHeader('Content-Type', 'Application/json');
        res.json(rows);
    } catch (err) {
        console.error(err.message);
    } finally {
        if (connection) connection.release();
    }
});

app.get('/customer', async (req, res) => {
    let connection;
    try {
        connection = await pool.getConnection();
        const rows = await connection.query("SELECT * FROM customer");
        res.statusCode = 200;
        res.setHeader('Content-Type', 'Application/json');
        res.json(rows);
    } catch (err) {
        console.error(err.message);
    } finally {
        if (connection) connection.release();
    }
});

app.get('/foods', async (req, res) => {
    let connection;
    try {
        connection = await pool.getConnection();
        const rows = await connection.query("SELECT * FROM foods");
        res.statusCode = 200;
        res.setHeader('Content-Type', 'Application/json');
        res.json(rows);
    } catch (err) {
        console.error(err.message);
    } finally {
        if (connection) connection.release();
    }
});

/**
 * @swagger
 * /agents:
 *    get:
 *      description: Return all agents
 *      produces:
 *        - application/json
 *      responses:
 *        200:
 *           description: Containing array of agent objects with details
 */

/**
 * @swagger
 * /customer:
 *    get:
 *      description: Return all customers
 *      produces:
 *        - application/json
 *      responses:
 *        200:
 *           description: Containing array of customer objects with details
 */

/**
 * @swagger
 * /foods:
 *    get:
 *      description: Return all foods
 *      produces:
 *        - application/json
 *      responses:
 *        200:
 *           description: Containing array of food objects with details
 */

app.put('/agents/:id', async (req, res) => {
    let connection;
    try {
        const id = req.params.id;
        const bodyval = req.body.area;
        connection = await pool.getConnection();
        rows = await connection.query("UPDATE agents SET WORKING_AREA = ? WHERE AGENT_CODE = ?", [bodyval, id]);
        res.statusCode = 200;
        res.setHeader('Content-Type', 'Application/json');
        res.json(rows);
    } catch (err) {
        console.error(err.message);
    } finally {
        if (connection) connection.release();
    }
});

/**
 * @swagger
 * /agents/{id}:
 *  put:
 *      description: put a value by using a id
 *      parameters:
 *          - name: id
 *            description: Agent area can be updated
 *            in: path
 *            type: string
 *            required: true
 *          - name: reqBody
 *            description: request body
 *            in: body
 *            schema:
 *              type: object
 *              properties:
 *                  area:
 *                      type: string
 *              required:
 *                  -area
 *      responses:
 *          '200':
 *              description: Updated
 */

app.post('/agents', async (req, res) => {
    let connection;
    const id = req.body.id;
    const name = req.body.name;
    const area = req.body.area;
    const amt = req.body.amt;
    const phone = req.body.phone;
    const ctry = req.body.ctry;
    try {
        connection = await pool.getConnection();
        rows = await connection.query("INSERT INTO agents (`AGENT_CODE`, `AGENT_NAME`, `WORKING_AREA`, `COMMISSION`, `PHONE_NO`, `COUNTRY`) VALUES(?,?,?,?,?,?)", [id, name, area, amt, phone, ctry]);
        res.statusCode = 200;
        res.setHeader('Content-Type', 'Application/json');
        res.json(rows);
    } catch (err) {
        console.error(err.message);
    } finally {
        if (connection) connection.release();
    }
});

/**
 * @swagger
 * /agents:
 *  post:
 *      description: Create a new agent
 *      parameters:
 *          - name: reqBody
 *            description: request body
 *            in: body
 *            schema:
 *              type: object
 *              properties:
 *                  id:
 *                    type: string
 *                  name:
 *                    type: string
 *                  area:
 *                    type: string
 *                  amt:
 *                    type: number
 *                  phone:
 *                    type: string
 *                  ctry:
 *                    type: string
 *              required:
 *                  - area
 *                  - id
 *                  - name
 *                  - amt
 *                  - phone
 *      responses:
 *          '200':
 *              description: New record added to agents table
 */

app.patch('/agents/:id', async (req, res) => {
    let connection;
    try {
        const id = req.params.id;
        const bodyval = req.body.area;
        connection = await pool.getConnection();
        rows = await connection.query("UPDATE agents SET WORKING_AREA = ? WHERE AGENT_CODE = ?", [bodyval, id]);
        res.statusCode = 200;
        res.setHeader('Content-Type', 'Application/json');
        res.json(rows);
    } catch (err) {
        console.error(err.message);
    } finally {
        if (connection) connection.release();
    }
});

/**
   * @swagger
   * /agents/{id}:
   *  patch:
   *      description: using id of the agent to modify the area name
   *      parameters:
   *          - name: id
   *            description: id to update by
   *            in: path
   *            type: string
   *            required: true
   *          - name: reqBody
   *            description: request body
   *            in: body
   *            schema:
   *              type: object
   *              properties:
   *                  area:
   *                      type: string
   *              required:
   *                  -area
   *      responses:
   *          '200':
   *              description: patch done
   */

app.delete('/agents/:id', async (req, res) => {
    let connection;
    try {
        const id = req.params.id;
        connection = await pool.getConnection();
        rows = await connection.query("DELETE FROM agents WHERE AGENT_CODE = ?", [id]);
        res.statusCode = 200;
        res.setHeader('Content-Type', 'Application/json');
        res.json(rows);
    } catch (err) {
        console.error(err.message);
    } finally {
        if (connection) connection.release();
    }
});

/**
 * @swagger
 * /agents/{id}:
 *  delete:
 *      description: Delete the agent using id
 *      parameters:
 *          - name: id
 *            description: Agent record deleted using id
 *            in: path
 *            type: string
 *            required: true
 *      responses:
 *          '200':
 *              description: Deleted
 */


app.listen(port, () => {
    console.log(`The app is running at ${port}`);
});